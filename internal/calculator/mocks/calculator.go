// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iamnande/ff8-magic-api/internal/calculator (interfaces: Calculator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	calculator "github.com/iamnande/ff8-magic-api/internal/calculator"
	datastore "github.com/iamnande/ff8-magic-api/internal/datastore"
)

// MockCalculator is a mock of Calculator interface.
type MockCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorMockRecorder
}

// MockCalculatorMockRecorder is the mock recorder for MockCalculator.
type MockCalculatorMockRecorder struct {
	mock *MockCalculator
}

// NewMockCalculator creates a new mock instance.
func NewMockCalculator(ctrl *gomock.Controller) *MockCalculator {
	mock := &MockCalculator{ctrl: ctrl}
	mock.recorder = &MockCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculator) EXPECT() *MockCalculatorMockRecorder {
	return m.recorder
}

// CardMagicRatio mocks base method.
func (m *MockCalculator) CardMagicRatio(arg0 context.Context, arg1 string, arg2 datastore.RecordType, arg3 float64) (*calculator.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardMagicRatio", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*calculator.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardMagicRatio indicates an expected call of CardMagicRatio.
func (mr *MockCalculatorMockRecorder) CardMagicRatio(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardMagicRatio", reflect.TypeOf((*MockCalculator)(nil).CardMagicRatio), arg0, arg1, arg2, arg3)
}
